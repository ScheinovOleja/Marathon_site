from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified
from pony.orm import db_session

from marathon_bot import bot
from marathon_bot.handlers.main_menu_handler import main_menu
from marathon_bot.models import Codes, Users, Tasks
from marathon_bot.states.all_states_menu import GetScopes


async def send_codes_message(query: types.CallbackQuery, state: FSMContext):
    markup = types.InlineKeyboardMarkup().add(main_menu)
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∫—É—Å–Ω—è—à–∫–∏ üçì\n–í–≤–æ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –æ–Ω –±—ã–ª –≤—ã–¥–∞–Ω:"
    await GetScopes.first()
    msg = await query.message.edit_text(text, reply_markup=markup)
    await state.update_data({'msg': msg.to_python()})


async def get_code(message: types.Message, state: FSMContext):
    markup = types.InlineKeyboardMarkup().add(main_menu)
    state_data = await state.get_data()
    with db_session:
        code = Codes.select().where(code=message.text.lower(), marathon=state_data['marathon_id'])[:]
        if code:
            user = await Users.get_user(tg_id=message.from_user.id, marathon_id=state_data['marathon_id'])
            if any([code[0].id == entered.id for entered in user.entered_codes]):
                text = "–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥! –í–∫—É—Å–Ω—è—à–µ–∫ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ!"
            else:
                user.scopes += code[0].scopes
                text = f'–°–ø–∞—Å–∏–±–æ!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {code[0].scopes} –≤–∫—É—Å–Ω—è—à–µ–∫!\n–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ, –≤–≤–æ–¥–∏—Ç–µ, –Ω–µ ' \
                       f'—Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å)'
                code[0].user.add(user)
        else:
            code_task = Tasks.get(unique_code=message.text.lower())
            if code_task is not None:
                user = await Users.get_user(tg_id=message.from_user.id, marathon_id=state_data['marathon_id'])
                if any([code_task.id == completed.id for completed in user.completed_tasks]):
                    text = '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ! –í–∫—É—Å–Ω—è—à–µ–∫ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ!'
                else:
                    user.scopes += code_task.count_scopes
                    text = f'–°–ø–∞—Å–∏–±–æ!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {code_task.count_scopes} –≤–∫—É—Å–Ω—è—à–µ–∫!\n–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ, ' \
                           f'–≤–≤–æ–¥–∏—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å!'
                    user.completed_tasks.add(code_task)
            else:
                text = "–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!"
    try:
        msg = await bot.edit_message_text(text, state_data['msg']['chat']['id'], state_data['msg']["message_id"],
                                          reply_markup=markup)
        await state.update_data({'msg': msg.to_python()})
        await message.delete()
    except MessageNotModified:
        await message.delete()
