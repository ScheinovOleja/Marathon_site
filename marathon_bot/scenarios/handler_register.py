import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from pony.orm import db_session, commit, MultipleObjectsFoundError
from psycopg2.extras import NamedTupleCursor

from marathon_bot import con, bot, bot_cfg
from marathon_bot.handlers.main_menu_handler import send_main_menu
from marathon_bot.models import Marathon, Users, AllUsers, InviteCode
from marathon_bot.states.all_states_menu import MainMenu
from marathon_bot.states.state_scenarios import Register


async def send_welcome(message: types.Message, action='send'):
    with db_session:
        try:
            if not AllUsers.get(tg_id=message.from_user.id):
                AllUsers(tg_id=message.from_user.id)
                commit()
        except MultipleObjectsFoundError:
            pass
        marathons = Marathon.select().order_by(Marathon.id)[:]
        markup = types.InlineKeyboardMarkup()
        users = Users.select().where(tg_id=message.chat.id)[:]
        for marathon in marathons:
            if marathon.date_start <= datetime.datetime.now().date() <= marathon.date_end:
                text = f"{marathon.name}"
                if marathon.close:
                    text += " üõ†"
                if any([user for user in users if user.marathon == marathon]):
                    text += " ‚úÖÔ∏è"
                if marathon.price > 0:
                    text += " üíé"
                    text += f" –û—Å—Ç–∞–ª–æ—Å—å {marathon.count_users} –º–µ—Å—Ç!"
                else:
                    text += " üÜì"
                markup.add(
                    types.InlineKeyboardButton(
                        text=text,
                        callback_data=marathon.name + '_marathon')
                )
    if message.content_type == 'invoice' and action == 'edit':
        await message.delete()
        action = 'send'
    if action == 'send':
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤:\n\n"
                             "üõ† - –º–∞—Ä–∞—Ñ–æ–Ω –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏\n"
                             # "üíé/üÜì - –ø–ª–∞—Ç–Ω—ã–π/–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω\n"
                             "‚úÖ - –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ\n", reply_markup=markup)
    elif action == 'edit':
        await message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤:\n\n"
                                "üõ† - –º–∞—Ä–∞—Ñ–æ–Ω –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏\n"
                                # "üíé/üÜì - –ø–ª–∞—Ç–Ω—ã–π/–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω\n"
                                "‚úÖ - –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ\n", reply_markup=markup)
    await Register.choice_marathon.set()


@db_session
async def check_register_from_marathon(query: types.CallbackQuery, state: FSMContext):
    cur = con.cursor(cursor_factory=NamedTupleCursor)
    cur.execute(
        f"""
            SELECT pam.id, pau.first_name, pau.last_name
            FROM marathon as pam
            INNER JOIN users as pau ON pam.id = pau.marathon_id
            WHERE pau.tg_id = {query.from_user.id} AND pam.name = \'{query.data.split("_marathon")[0]}\'
        """
    )
    marathon = cur.fetchone()
    count_users = Marathon.get(name=query.data.split("_marathon")[0])
    if count_users.count_users <= 0:
        return await query.message.edit_text(
            "‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–±–æ—Ä –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ –Ω–µ–≥–æ —É–∂–µ –∑–∞–Ω—è—Ç—ã.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞ ü§ó\n"
            "üçì –ñ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –º–æ—ë–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ: instagram.com/vkus_viki\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ /start !")
    if not marathon or (marathon.first_name == '.' and marathon.last_name == '.'):
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                text='–î–∞',
                callback_data=f'Register_from_Marathon_{query.data.split("_marathon")[0]}')
        )
        markup.add(
            types.InlineKeyboardButton(
                text='–ù–µ—Ç',
                callback_data='None')
        )
        marathon = Marathon.get(name=query.data.split('_marathon')[0])
        await query.message.edit_text(
            f"{marathon.description}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=markup,
        )
        await Register.next()
        await state.update_data({'marathon_id': marathon.id})
    else:
        await MainMenu.main_menu.set()
        await state.set_data({'marathon_id': marathon.id})
        await send_main_menu(query, state)


async def none_register_marathon(query: types.CallbackQuery):
    await Register.choice_marathon.set()
    await send_welcome(message=query.message, action='edit')


@db_session
async def register_marathon(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    marathon = await Marathon.get_marathon(marathon_id=data['marathon_id'])
    if marathon.count_users <= 0:
        return await none_register_marathon(query)
    try:
        user = await Users.get_user(query.from_user.id, data['marathon_id'])
        check = True if user.is_pay else False
    except Exception:
        check = False
    if marathon.price > 0.0 and not check:
        prices = [types.LabeledPrice(label=marathon.name, amount=marathon.price * 100)]
        await query.message.delete()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {marathon.price} –†–£–ë', pay=True)).add(
            types.InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥',
                callback_data='None')
        )
        await bot.send_invoice(
            query.message.chat.id,
            title=marathon.name,
            description=marathon.description,
            provider_token=bot_cfg.pay_token,
            currency='rub',
            prices=prices,
            need_name=True,
            need_email=True,
            need_phone_number=True,
            start_parameter='time-machine-example',
            payload='register-marathon-payments',
            reply_markup=markup
        )
    else:
        Users(
            tg_id=query.from_user.id,
            username=query.from_user.username,
            first_name='.',
            last_name='.',
            scopes=0,
            marathon=marathon.id,
            is_pay=False,
        )
        commit()
        msg = await query.message.edit_text(
            "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–ü—Ä–æ—à—É –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
            "–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!\n –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?(–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)\n"
            "‚ùóÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è"
        )
        await state.update_data({'msg': msg.to_python()})
        await Register.next()


async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@db_session
async def process_successful_payment(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    Users(
        tg_id=message.chat.id,
        username=message.chat.username,
        first_name='.',
        last_name='.',
        scopes=0,
        marathon=state_data['marathon_id'],
        is_pay=True,
    )
    commit()
    msg = await message.answer(
        "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–ü—Ä–æ—à—É –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
        "–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!\n –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?(–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)\n"
        "‚ùóÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è"
    )
    await state.update_data({'msg': msg.to_python()})
    await Register.next()


async def get_full_name(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    try:
        with db_session:
            user = await Users.get_user(message.chat.id, state_data['marathon_id'])
            user.first_name = message.text.split(' ')[1]
            user.last_name = message.text.split(' ')[0]
            user.marathon.count_users -= 1
    except Exception as exc:
        failure_text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É! (–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)\n" \
                       "‚ùóÔ∏è–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è"
        if state_data['msg']['text'] == failure_text:
            pass
        else:
            msg = await bot.edit_message_text(failure_text, state_data['msg']['chat']['id'],
                                              state_data['msg']['message_id'])
            await state.update_data({'msg': msg.to_python()})
        await message.delete()
        return
    await state.update_data({"marathon_id": state_data['marathon_id'], 'msg': state_data['msg']})
    await send_main_menu(types.CallbackQuery(message=message), state)
    await message.delete()


@db_session
async def get_invite_code_from_marathon(message):
    check = InviteCode.get(code=message.text)
    if check:
        if check.date_delete > datetime.datetime.now(check.date_delete.tzinfo):
            if any([user.marathon == check.marathon for user in Users.select().where(tg_id=message.from_user.id)]):
                return False
            else:
                return True
        else:
            return False
    else:
        return False


async def delete_all_message(message: types.Message, state: FSMContext):
    check = get_invite_code_from_marathon(message)
    breakpoint()
    if check:
        await Register.check_register.set()
        await state.update_data({'marathon_id': check.marathon.id})
        await process_successful_payment(message, state)
    else:
        await message.delete()
