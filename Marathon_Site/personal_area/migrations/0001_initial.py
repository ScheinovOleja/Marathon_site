# Generated by Django 3.2.6 on 2021-08-21 19:12

from django.db import migrations, models
import django.db.models.deletion
import personal_area.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AllUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_id', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'all_users',
            },
        ),
        migrations.CreateModel(
            name='BotConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_bot', models.CharField(max_length=30, verbose_name='Имя бота')),
                ('bot_token', models.CharField(max_length=50, verbose_name='Токен бота')),
                ('pay_token', models.CharField(max_length=30, verbose_name='Токен оплаты')),
            ],
            options={
                'verbose_name_plural': 'Конфигурация бота',
                'db_table': 'bot_cfg',
            },
        ),
        migrations.CreateModel(
            name='ButtonsText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_menu_tasks', models.CharField(max_length=50)),
                ('main_menu_user_info', models.CharField(max_length=50)),
                ('main_menu_kcal', models.CharField(max_length=50)),
                ('main_menu_get_scopes', models.CharField(max_length=50)),
                ('main_menu_buy_product', models.CharField(max_length=50)),
                ('marathon_switch', models.CharField(max_length=50)),
                ('back', models.CharField(max_length=50)),
                ('main_menu', models.CharField(max_length=50)),
                ('user_info_measurement_choice', models.CharField(max_length=50)),
                ('user_info_photos_choice', models.CharField(max_length=50)),
                ('stats_all', models.CharField(max_length=50)),
                ('kcal', models.CharField(max_length=50)),
                ('ready_made_menu', models.CharField(max_length=50)),
                ('training', models.CharField(max_length=50)),
                ('measurement_after', models.CharField(max_length=50)),
                ('measurement_before', models.CharField(max_length=50)),
                ('after', models.CharField(max_length=50)),
                ('before', models.CharField(max_length=50)),
                ('front_after', models.CharField(max_length=50)),
                ('sideways_after', models.CharField(max_length=50)),
                ('back_after', models.CharField(max_length=50)),
                ('front_before', models.CharField(max_length=50)),
                ('sideways_before', models.CharField(max_length=50)),
                ('back_before', models.CharField(max_length=50)),
                ('add_front_after', models.CharField(max_length=50)),
                ('add_sideways_after', models.CharField(max_length=50)),
                ('add_back_after', models.CharField(max_length=50)),
                ('add_front_before', models.CharField(max_length=50)),
                ('add_sideways_before', models.CharField(max_length=50)),
                ('add_back_before', models.CharField(max_length=50)),
                ('front_after_get', models.CharField(max_length=50)),
                ('sideways_after_get', models.CharField(max_length=50)),
                ('back_after_get', models.CharField(max_length=50)),
                ('front_before_get', models.CharField(max_length=50)),
                ('sideways_before_get', models.CharField(max_length=50)),
                ('back_before_get', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Подписи кнопок',
                'verbose_name_plural': 'Подписи кнопок',
                'db_table': 'btn_text',
            },
        ),
        migrations.CreateModel(
            name='BZUUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proteins', models.IntegerField()),
                ('fats', models.IntegerField()),
                ('carbohydrates', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'БЖУ пользователей',
                'db_table': 'bzu_users',
            },
        ),
        migrations.CreateModel(
            name='CategoryTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50, verbose_name='Категория задания')),
            ],
            options={
                'verbose_name_plural': 'Задания',
                'db_table': 'category_tasks',
            },
        ),
        migrations.CreateModel(
            name='CategoryTrainingMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(default='', max_length=200, verbose_name='Категория для обучения')),
            ],
            options={
                'verbose_name_plural': 'Обучение составления меню',
                'db_table': 'category_training',
            },
        ),
        migrations.CreateModel(
            name='DayReadyMadeMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(max_length=50, verbose_name='День готового меню')),
            ],
            options={
                'verbose_name_plural': 'Дни готовых меню',
                'db_table': 'day_ready_made',
            },
        ),
        migrations.CreateModel(
            name='KcalCategoryReadyMadeMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kcal_category', models.CharField(max_length=50, verbose_name='Количество калорий на готовое меню')),
            ],
            options={
                'verbose_name_plural': 'Категории готовых меню',
                'db_table': 'kcal_category_ready_made',
            },
        ),
        migrations.CreateModel(
            name='Marathon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название марафона')),
                ('description', models.TextField(verbose_name='Описание марафона')),
                ('date_start', models.DateField(verbose_name='Дата начала марафона')),
                ('date_end', models.DateField(validators=[personal_area.validators.validate_date], verbose_name='Дата окончания марафона')),
                ('send_measurements_before', models.BooleanField(default=False, verbose_name='Отправка замеров ДО')),
                ('send_measurements_after', models.BooleanField(default=False, verbose_name='Отправка замеров ПОСЛЕ')),
                ('close', models.BooleanField(default=False, verbose_name='Закрыт ли марафон')),
                ('price', models.IntegerField(default=0, validators=[personal_area.validators.validate_price], verbose_name='Стоимость марафона')),
            ],
            options={
                'verbose_name_plural': 'Марафон',
                'db_table': 'marathon',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('waist_after', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров груди ДО')),
                ('breast_after', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров груди ДО')),
                ('femur_after', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров груди ДО')),
                ('weight_after', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров груди ДО')),
                ('waist_before', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров груди ПОСЛЕ')),
                ('breast_before', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров талии ПОСЛЕ')),
                ('femur_before', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров бедер ПОСЛЕ')),
                ('weight_before', models.FloatField(blank=True, null=True, verbose_name='Отправка замеров веса ПОСЛЕ')),
            ],
            options={
                'verbose_name_plural': 'Замеры пользователей',
                'db_table': 'measurement',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo_front_before', models.ImageField(blank=True, null=True, upload_to='users_photo/', verbose_name='Отправка фото спереди ДО')),
                ('photo_sideways_before', models.ImageField(blank=True, null=True, upload_to='users_photo/', verbose_name='Отправка фото сбоку ДО')),
                ('photo_back_before', models.ImageField(blank=True, null=True, upload_to='users_photo/', verbose_name='Отправка фото сзади ДО')),
                ('photo_front_after', models.ImageField(blank=True, null=True, upload_to='users_photo/', verbose_name='Отправка фото спереди ПОСЛЕ')),
                ('photo_sideways_after', models.ImageField(blank=True, null=True, upload_to='users_photo/', verbose_name='Отправка фото сбоку ПОСЛЕ')),
                ('photo_back_after', models.ImageField(blank=True, null=True, upload_to='users_photo/', verbose_name='Отправка фото сзади ПОСЛЕ')),
            ],
            options={
                'verbose_name_plural': 'Фотографии пользователей',
                'db_table': 'photo',
            },
        ),
        migrations.CreateModel(
            name='PhotoStates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_photo', models.CharField(choices=[('front', 'Спереди'), ('sideways', 'Сбоку'), ('back', 'Сзади')], max_length=50, verbose_name='На какую фотографию выдавать эту?')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photo_states/', verbose_name='Отправка фото сбоку ДО')),
            ],
            options={
                'verbose_name': 'Категория фотографии',
                'verbose_name_plural': 'Примеры фотографий',
                'db_table': 'photo_states',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название приза')),
                ('description', models.TextField(verbose_name='Описание приза')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photo_products/', verbose_name='Фото приза')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon', verbose_name='Марафон, в котором этот товар')),
            ],
            options={
                'verbose_name_plural': 'Призы(бывшие товары)',
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='Tasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название задания')),
                ('description', models.TextField(max_length=1000, verbose_name='Описание задания')),
                ('count_scopes', models.IntegerField(verbose_name='Количество очков за задание')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photo_tasks/', verbose_name='Фотография задания')),
                ('date_start', models.DateTimeField(verbose_name='Дата открытия задания')),
                ('date_stop', models.DateTimeField(verbose_name='Дата закрытия задания')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.categorytasks', verbose_name='Категория задания')),
            ],
            options={
                'verbose_name_plural': 'Задания',
                'db_table': 'tasks',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_id', models.IntegerField(verbose_name='Telegram id пользователя')),
                ('username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Telegram id пользователя')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя пользователя')),
                ('last_name', models.CharField(max_length=50, verbose_name='Фамилия пользователя')),
                ('scopes', models.IntegerField(verbose_name='Количество очков пользователя')),
                ('sex', models.CharField(blank=True, choices=[('m', 'M'), ('w', 'W')], max_length=1, null=True, verbose_name='Пол пользователя')),
                ('age', models.IntegerField(default=0, null=True)),
                ('weight', models.IntegerField(default=0, null=True)),
                ('height', models.IntegerField(default=0, null=True)),
                ('purpose', models.CharField(default='', max_length=1, null=True)),
                ('kcal', models.IntegerField(default=0, null=True)),
                ('is_enter_invite_code', models.BooleanField(blank=True, null=True, verbose_name='Ввел ли пригласительный код?')),
                ('bzu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.bzuusers')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon', verbose_name='Марафон пользователя')),
                ('measurement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.measurement')),
                ('photos', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.photo')),
            ],
            options={
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='TrainingInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, verbose_name='Название рецепта обучения')),
                ('description', models.TextField(default='', max_length=5000, verbose_name='Описание обучения')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photo_training_menu/', verbose_name='Фотография блюда:')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.categorytrainingmenu', verbose_name='Категория обучающего меню')),
            ],
            options={
                'verbose_name_plural': 'Обучение составления меню',
                'db_table': 'training_info',
            },
        ),
        migrations.CreateModel(
            name='TimeDayReadyMadeMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_day', models.CharField(max_length=50, verbose_name='Время дня')),
                ('day', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.dayreadymademenu', verbose_name='День')),
            ],
            options={
                'verbose_name_plural': '  Готовые меню',
                'db_table': 'time_day_ready_made',
            },
        ),
        migrations.CreateModel(
            name='ReadyMadeMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_menu', models.CharField(max_length=50, verbose_name='Название меню')),
                ('description', models.TextField(verbose_name='Описание меню')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photo_ready_made/', verbose_name='Фотография блюда:')),
                ('time_day', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.timedayreadymademenu', verbose_name='Время дня меню')),
            ],
            options={
                'verbose_name': 'Готовые меню',
                'verbose_name_plural': 'Готовые меню',
                'db_table': 'ready_made',
            },
        ),
        migrations.CreateModel(
            name='InviteCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default='', max_length=12, unique=True, verbose_name='Пригласительный код')),
                ('date_delete', models.DateTimeField(verbose_name='Дата/время удаления кода')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon', verbose_name='Марафон, в который приглашает код')),
            ],
            options={
                'verbose_name_plural': 'Коды приглашения',
                'db_table': 'invite_code',
            },
        ),
        migrations.AddField(
            model_name='dayreadymademenu',
            name='kcal_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.kcalcategoryreadymademenu', verbose_name='ККАЛ готового меню'),
        ),
        migrations.CreateModel(
            name='Codes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='Код для халявных баллов')),
                ('scopes', models.IntegerField(verbose_name='Количество халявных очков')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon', verbose_name='Марафон, в котором находится код')),
            ],
            options={
                'verbose_name_plural': 'Коды',
                'db_table': 'codes',
            },
        ),
        migrations.CreateModel(
            name='TasksUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tasks', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.tasks')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.users')),
            ],
            options={
                'db_table': 'tasks_users',
                'unique_together': {('tasks', 'users')},
            },
        ),
        migrations.CreateModel(
            name='ProductUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.product')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.users')),
            ],
            options={
                'db_table': 'product_users',
                'unique_together': {('product', 'users')},
            },
        ),
        migrations.CreateModel(
            name='KcalCategoryReadyMadeMenuMarathon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.kcalcategoryreadymademenu', verbose_name='Категория готового меню')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon', verbose_name='Марафон, в котором эта категория')),
            ],
            options={
                'verbose_name': ' Категории готовых меню',
                'db_table': 'kcalcategoryreadymademenu_marathon',
                'unique_together': {('category', 'marathon')},
            },
        ),
        migrations.CreateModel(
            name='CodesUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codes', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.codes')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.users')),
            ],
            options={
                'db_table': 'codes_users',
                'unique_together': {('codes', 'users')},
            },
        ),
        migrations.CreateModel(
            name='CategoryTrainingMenuMarathon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.categorytrainingmenu', verbose_name='Категория меню для обучения')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon', verbose_name='Марафон, в котором эта категория')),
            ],
            options={
                'verbose_name': 'Категории в составлении меню',
                'db_table': 'categorytrainingmenu_marathon',
                'unique_together': {('category', 'marathon')},
            },
        ),
        migrations.CreateModel(
            name='CategoryTasksMarathon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.categorytasks')),
                ('marathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='personal_area.marathon')),
            ],
            options={
                'db_table': 'categorytasks_marathon',
                'unique_together': {('category', 'marathon')},
            },
        ),
    ]
